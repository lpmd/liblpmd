#
#
#

name = liblpmd
fullname = 'LibLPMD'
version = 3.0.0
author = 'GNM <gnm@gnm.cl>'
prefix = /usr/local
mainfirst = true

language c++

   ifdef intel
    compiler = mpiCC
    linker = mpiCC -parallel
    flags = -Wall -O3 -axSSE4.1 -parallel -diag-disable remark -finline-functions -DNDEBUG  -fPIC -I.
    ifdef openmp
     openmpflags = -openmp
    endif
   else
    compiler = mpiCC
    linker = mpiCC -fPIC
    flags = -g -Wall -O3 -ffast-math -funroll-all-loops -finline-functions -fPIC -std=gnu++98 -I.
    ifdef openmp
     openmpflags = -fopenmp
     endif
   endif

end

language c

   ifdef intel
    compiler = icc
   else
    compiler = gcc
   endif

   ifdef intel 
    flags = -Wall -O3 -std=c99 -fast -diag-disable remark -DNDEBUG -fPIC
   else 
    flags = -g -Wall -O3 -ffast-math -finline-functions -fPIC -std=c99
   endif

   ifdef intel
    linker = icc
   else
    linker = gcc
   endif

end

directory .
    staticlibrary libmtwist
       language = c
       flags += -Dlint 
       sources = mtwist.c
    end

    library liblpmd
       language = c++
       sources = atomset.cc boundary.cc crossing.cc error.cc matrix.cc topology.cc vector.cc timer.cc capi.cc
       headers = lpmd_headers
       installpath = lib
       libraries += mtwist.o
       version = 3.0.0 
    end

    headers lpmd_headers
       sources = lpmd/atomselection.h lpmd/atomset.h lpmd/basiccell.h lpmd/buffer.h lpmd/capi.h lpmd/cell.h lpmd/celltopology.h \
		 lpmd/dapi.h lpmd/error.h lpmd/matrix.h lpmd/neighborlist.h lpmd/nonorthogonalcell.h lpmd/orthogonalcell.h lpmd/rawatom.h \
		 lpmd/region.h lpmd/returnvalue.h lpmd/selector.h lpmd/tagcontainer.h lpmd/taskreturnvalue.h lpmd/timer.h lpmd/topology.h \
		 lpmd/util.h lpmd/vector.h lpmd/mtwist.h lpmd/params.h
       installpath = include/lpmd
    end

    file config.h
       sources = config.h.in
       expand = version
    end

    file liblpmd-3.0.pc
       sources = liblpmd-3.0.pc.in
       expand = prefix version
       installpath = lib/pkgconfig
    end

    binary plugmaker
       language = python
       sources = plugmaker.py
       installpath = bin/
    end

end

directory lpplugmaker

    file PluginProcessor.py
       language = python
       sources = PluginProcessor.py
       ifdef prefix
        installpath = $(prefix)/lib/lpplugmaker
       else
        installpath = $(PYTHONLIB)/lpplugmaker
       endif
    end

    file CParser.py
       language = python
       sources = CParser.py
       ifdef prefix
        installpath = $(prefix)/lib/lpplugmaker
       else
        installpath = $(PYTHONLIB)/lpplugmaker
       endif
    end

    file CFormatter.py
       language = python
       sources = CFormatter.py
       ifdef prefix
        installpath = $(prefix)/lib/lpplugmaker
       else
        installpath = $(PYTHONLIB)/lpplugmaker
       endif
    end

    file ShuntingYard.py
       language = python
       sources = ShuntingYard.py
       ifdef prefix
        installpath = $(prefix)/lib/lpplugmaker
       else
        installpath = $(PYTHONLIB)/lpplugmaker
       endif
    end

    file __init__.py
       language = python
       sources = __init__.py
       ifdef prefix
         installpath = $(prefix)/lib/lpplugmaker
       else
        installpath = $(PYTHONLIB)/lpplugmaker
       endif
    end
end

directory lptoolkit

    file __init__.py
       language = python
       sources = __init__.py
       ifdef prefix
         installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

    file LPMD.py
       language = python
       sources = LPMD.py.in
       expand = prefix
       ifdef prefix
        installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

    file Plugin.py
       language = python
       sources = Plugin.py
       ifdef prefix
        installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

    file Simulation.py
       language = python
       sources = Simulation.py
       ifdef prefix
        installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

    file Tag.py
       language = python
       sources = Tag.py
       ifdef prefix
        installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

    file Topology.py
       language = python
       sources = Topology.py
       ifdef prefix
        installpath = $(prefix)/lib/lptoolkit
       else
        installpath = $(PYTHONLIB)/lptoolkit
       endif
    end

end

directory binding
    module lpmdmodule.so
       language = c++
       sources = py_cell.cc py_topology.cc py_atomset.cc py_neighborlist.cc py_atomselection.cc py_slothandler.cc py_slot.cc \
                 py_matrix.cc py_timer.cc lpmdmodule.cc 
       flags += -fPIC `python3-config --includes` -I.. 
       installpath = lib
       libraries += ../liblpmd.so `python3-config --ldflags`
       version = 1.0.0
    end
end
