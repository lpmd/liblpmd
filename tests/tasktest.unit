
#include <cmath>
#include <lpmd/taskrunner.h>

using namespace lpmd;

typedef void (*MockParticleSetTaskFunction)(long int, double *, double *, double *, double *);

class MockParticleSet: public TaskRunner<MockParticleSetTaskFunction, double *>
{
 public:
  MockParticleSet(long int n): natoms(n), pos(0), vel(0), acc(0)
  {
   pos = new double[n];
   vel = new double[n];
   acc = new double[n];
   for (long int i=0;i<n;++i) { pos[i] = vel[i] = acc[i] = 0.0; }
  }

  ~MockParticleSet()
  {
   delete [] pos;
   delete [] vel;
   delete [] acc;
  }

  class Task: public lpmd::Task<MockParticleSetTaskFunction, double *>
  {
   public: 
     Task(MockParticleSetTaskFunction f, long int reslen)
     {
      res = new double[reslen];
      pfunc = f;
     }

     ~Task() { delete [] res; }
  };
 
  void RunTask(lpmd::Task<MockParticleSetTaskFunction, double *> & t)
  {
   (*(t.InnerFunction()))(natoms, pos, vel, acc, t.Result());
  }

  double & Position(long int i) { return pos[i]; } 
  double & Velocity(long int i) { return vel[i]; } 
  double & Acceleration(long int i) { return acc[i]; } 

 private:
   long int natoms;
   double * pos;
   double * vel;
   double * acc;
};

void AsignaVel(long int n, double * pos, double * vel, double * acc, double * res)
{
 for (long int i=0;i<n;++i) vel[i] = sqrt(2.0);
}

void SumaVel2(long int n, double * pos, double * vel, double * acc, double * res)
{
 double s = 0.0;
 for (long int i=0;i<n;++i) s += pow(vel[i],2.0);
 res[0] = s;
}

@testsuite Tests de Task

@test Prueba de modificacion de valores con Task
{
 MockParticleSet ps(1000);
 MockParticleSet::Task t1(&AsignaVel, 1);
 ps.RunTask(t1);
 for (long int i=0;i<1000;++i)
 {
  @approx ps.Velocity(i), sqrt(2.0), 1.0E-08
 }
}
@end

@test Prueba de calculo de propiedades con Task
{
 MockParticleSet ps(1000);
 MockParticleSet::Task t1(&AsignaVel, 1);
 MockParticleSet::Task t2(&SumaVel2, 1);
 ps.RunTask(t1);
 ps.RunTask(t2);
 @approx t2.Result()[0], 2000.0, 1.0E-10
}
@end

