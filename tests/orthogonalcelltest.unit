//
//
//

#include <lpmd/orthogonalcell.h>
#include <cstdlib>
#include <ctime>

using namespace lpmd;

@testsuite Tests de OrthogonalCell

@test Constructor por defecto
{
 Vector e[3];
 e[0]=e1;e[1]=e2;e[2]=e3;
 OrthogonalCell a;
 for (int i=0 ; i< 3 ; ++i) 
 {
  @approx (a[i]-e[i]).Module(), 0.0, 1E-10
 }
}
@end

@test Constructor con a, b, c
{
 double aa=1.0, b=1.0, c=1.0;
 OrthogonalCell a(aa, b, c);
 @approx (a[0]-e1).Module(), 0.0, 1E-10
 @approx (a[1]-e2).Module(), 0.0, 1E-10
 @approx (a[2]-e3).Module(), 0.0, 1E-10
 OrthogonalCell cell2(10.0, 20.0, 30.0);
 @approx (cell2[0]-10.0*e1).Module(), 0.0, 1E-10
 @approx (cell2[1]-20.0*e2).Module(), 0.0, 1E-10
 @approx (cell2[2]-30.0*e3).Module(), 0.0, 1E-10
}
@end

@test Lectura y asignacion de Periodicity
{
 OrthogonalCell a;
 for (int q=0;q<3;++q)
 {
  @equal a.Periodicity(q), true
  a.Periodicity(q) = false;
  @equal a.Periodicity(q), false
 }
}
@end

@test Asignacion directa de los vectores base
{
 Vector a(10.0, 0.0, 0.0);
 Vector b(40.0, 0.0, 0.0);
 Vector c(70.0, 0.0, 0.0);
 OrthogonalCell CELL;
 CELL[0] = a;
 @approx (CELL[0]-a).Module(), 0.0, 1E-10
 CELL[1] = b;
 @approx (CELL[1]-b).Module(), 0.0, 1E-10
 CELL[2] = c;
 @approx (CELL[2]-c).Module(), 0.0, 1E-10
}
@end

@test Scale de los vectores base independientes
{
 OrthogonalCell c(10.0, 40.0, 70.0);
 c[0] *= .9;
 c[1] *=1.5;
 c[2] *= .8;
 @approx (c[0]-10.0*0.9*e1).Module(), 0.0, 1E-10
 @approx (c[1]-40.0*1.5*e2).Module(), 0.0, 1E-10
 @approx (c[2]-70.0*0.8*e3).Module(), 0.0, 1E-10
}
@end

@test Scale hidrostatico de vectores base
{
 OrthogonalCell c(10.0, 40.0, 70.0);
 c *= .5;
 @approx (c[0]-0.5*10.0*e1).Module(), 0.0, 1E-10
 @approx (c[1]-0.5*40.0*e2).Module(), 0.0, 1E-10
 @approx (c[2]-0.5*70.0*e3).Module(), 0.0, 1E-10
}
@end

@test ScaleByCell
{
 OrthogonalCell c(10, 10, 10);
 Vector a1(0.5,0.5,0.5);
 Vector a = c.ScaleByCell(a1);
 @approx (a-Vector(5,5,5)).Module(), 0.0, 1E-10
}
@end

@test Acomodar posicion dentro de la celda
{
 OrthogonalCell c(20, 20, 20);
 Vector acom = c.FittedInside(Vector(10.0, 10.0, 10.0));
 @approx (acom-Vector(10.0, 10.0, 10.0)).Module(), 0.0, 1.0E-10
 acom = c.FittedInside(Vector(22.0, 23.0, 24.0));
 @approx (acom-Vector(2.0, 3.0, 4.0)).Module(), 0.0, 1.0E-10
 acom = c.FittedInside(Vector(-3.0, -7.0, -4.0));
 @approx (acom-Vector(17.0, 13.0, 16.0)).Module(), 0.0, 1.0E-10
}
@end

@test Acomodar posicion dentro de la celda, multiples cajas
{
 OrthogonalCell c(20, 20, 20);
 Vector acom = c.FittedInside(Vector(63.0, 65.0, 61.0));
 @approx (acom-Vector(3.0, 5.0, 1.0)).Module(), 0.0, 1.0E-10
 acom = c.FittedInside(Vector(-83.0, -87.0, -84.0));
 @approx (acom-Vector(17.0, 13.0, 16.0)).Module(), 0.0, 1.0E-10
}
@end

@test Calculo de volumen, ortogonal
{
 OrthogonalCell c(10.0, 20.0, 30.0);
 @approx c.Volume(), 6000.0, 1.0E-10
}
@end

@test Displacement, celda periodica, cortas distancias
{
 srand48(long(time(NULL)));
 OrthogonalCell c(10, 10, 10);
 Vector center(5.0, 5.0, 5.0);
 for (int i=0;i<1000;++i)
 {
  Vector a = center + RandomVector(4.95);
  Vector b = center + RandomVector(4.95);
  @approx (a + c.Displacement(a, b) - b).Module(), 0.0, 1.0E-10
  @approx c.Displacement(center, a).Module(), 4.95, 1.0E-10
  @approx c.Displacement(center, b).Module(), 4.95, 1.0E-10
 }
}

@test Displacement, celda periodica, largas distancias
{
 srand48(long(time(NULL)));
 OrthogonalCell c(10.0, 10.0, 10.0);
 for (int q=0;q<3;++q) c.Periodicity(q) = true; 
 for (int i=0;i<1000;++i)
 {
  const Vector a = Vector(1.5, 1.5, 1.5) + RandomVector(1.0);
  const Vector b = Vector(8.5, 8.5, 8.5) + RandomVector(1.0);
  Vector delta = c.Displacement(a, b);
  for (int q=0;q<3;++q) 
  {
   @assert (fabs(delta[q]) <= 5.0)
   @assert (delta[q] < 0.0)
   @approx (fabs(delta[q])+fabs((b-a)[q])), 10.0, 1.0E-10
  }
 }
}
@end

@test Test de IsInside
{
 OrthogonalCell c(10, 10, 10);
 @assert c.IsInside(Vector(5.0, 5.0, 5.0))
 @assert c.IsInside(Vector(2.0, 4.0, 7.5))
 @assert (!c.IsInside(Vector(12.0, 4.0, 7.5)))
 @assert (!c.IsInside(Vector(-3.7, 7.0, -15.3)))
}
@end

