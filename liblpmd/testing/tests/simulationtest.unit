
#include <lpmd/simulation.h>
#include <lpmd/simulationcell.h>
#include <lpmd/potential.h>
#include <lpmd/integrator.h>

using namespace lpmd;

class MockIntegrator: public Integrator
{
 public:
   MockIntegrator(): counter(0) { }
   void Advance(SimulationCell & sc, Potential & pot) { counter++; }

   long int counter;
};

@testsuite Tests de Simulation

@test GetCell sin simulationcell activo arroja error
{
 Simulation s;
 try
 {
  SimulationCell & cell = s.GetCell();
  @assert false
 }
 catch (NoSimulationCell & e) 
 { 
  @assert true 
 }
}
@end

@test GetCell y SetCell
{
 SimulationCell cell;
 SimulationCell cell2;
 Simulation s(cell);
 s.SetCell(cell2);
 SimulationCell & pcell2 = s.GetCell();
 @equal &pcell2, &cell2
 @notequal &cell2, &cell
}
@end

@test GetIntegrator sin integrador activo arroja error
{
 Simulation s;
 try
 {
  Integrator & integ = s.GetIntegrator();
  @assert false
 }
 catch (NoIntegrator & e) 
 { 
  @assert true 
 }
}
@end

@test Test de SetIntegrator
{
 SimulationCell cell;
 Simulation s(cell);
 MockIntegrator integ;
 s.SetIntegrator(integ);
 @equal &integ, &(s.GetIntegrator())
}
@end

@test Seteo y calculo de temperatura
{
 SimulationCell  cell;
 Simulation s(cell);
 cell.Create(new Atom ("Cu"));
 s.InitVelocities();
 s.SetTemperature(300.0);
 @approx Temperature(cell), 300.0, 1.0E-10
 s.SetTemperature(150.0);
 @approx Temperature(cell), 150.0, 1.0E-10 
}
@end

@test Test de CurrentStep() a cero
{
 Simulation s;
 @equal s.CurrentStep(), 0
}
@end

@test Test de DoSteps()
{
 SimulationCell cell;
 Simulation s(cell);
 MockIntegrator integ;
 s.SetIntegrator(integ);
 s.DoSteps(5);
 @equal s.CurrentStep(), 5
 @equal integ.counter, 5
}
@end


