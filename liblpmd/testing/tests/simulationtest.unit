
#include <lpmd/simulation.h>
#include <lpmd/simulationbuilder.h>
#include <lpmd/potential.h>
#include <lpmd/integrator.h>
#include <lpmd/properties.h>

using namespace lpmd;

class MockIntegrator: public Integrator
{
 public:
   MockIntegrator(): counter(0) { }
   void Advance(Simulation & sim, Potential & pot) { counter++; }

   long int counter;
};

@testsuite Tests de Simulation

@test Inicializacion con numero de atomos
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 BasicParticleSet & atoms = s.Atoms();
 @equal atoms.Size(), 108
 
}
@end

@test GetIntegrator sin integrador activo arroja error
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 try
 {
  Integrator & integ = s.Integrator();
  @assert false
 }
 catch (MissingComponent & e) 
 { 
  @assert true 
 }
}
@end

@test Test de SetIntegrator
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 MockIntegrator integ;
 s.SetIntegrator(integ);
 @equal &integ, &(s.Integrator())
}
@end

@test Seteo y calculo de temperatura
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 s.SetTemperature(300.0);
 BasicParticleSet & atoms = s.Atoms();
 @approx Temperature(atoms), 300.0, 1.0E-10
 s.SetTemperature(150.0);
 @approx Temperature(atoms), 150.0, 1.0E-10 
}
@end

@test Test de CurrentStep() a cero
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 @equal s.CurrentStep(), 0
}
@end

@test Test de DoSteps()
{
 SimulationBuilder sb;
 Simulation & s = sb.CreateGeneric(108, Atom("Cu"));
 MockIntegrator integ;
 s.SetIntegrator(integ);
 s.DoSteps(5);
 @equal s.CurrentStep(), 5
 @equal integ.counter, 5
}
@end

