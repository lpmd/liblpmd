//
//
//

#include <lpmd/cell.h>
#include <cstdlib>
#include <ctime>

using namespace lpmd;

@testsuite Tests de Cell

@test Constructor por defecto
{
 Vector e[3];
 e[0]=e1;e[1]=e2;e[2]=e3;
 Cell a;
 for (int i=0 ; i< 3 ; ++i) 
 {
  @approx (a[i]-e[i]).Module(), 0.0, 1E-10
 }
}
@end

@test Constructor con tres vectores
{
 Vector e[3];
 e[0]=RandomVector(),e[1]=RandomVector(),e[2]=RandomVector();
 Cell a(e[0],e[1],e[2]);
 for (int i=0 ; i< 3 ; ++i) 
 {
  @approx (a[i]-e[i]).Module(), 0.0, 1E-10
 }
}
@end

@test Constructor con a,b,c,alpha,beta,gamma
{
 double aa=1,b=1,c=1,alpha=90,beta=90,gamma=90;
 Cell a(aa,b,c,alpha,beta,gamma);
 @approx (a[0]-e1).Module(), 0.0, 1E-10
 @approx (a[1]-e2).Module(), 0.0, 1E-10
 @approx (a[2]-e3).Module(), 0.0, 1E-10
}
@end

@test Constructor con strings usando 3 vectores <a,b,c>
{
 Cell a("<1,2,3> <4 ,5,6> <7,8,9>");
 @approx (a[0]-Vector(1,2,3)).Module(), 0.0, 1E-10
 @approx (a[1]-Vector(4,5,6)).Module(), 0.0, 1E-10
 @approx (a[2]-Vector(7,8,9)).Module(), 0.0, 1E-10
}
@end

@test Constructor con strings, 9 valores
{
 Cell b("1 2 3 4 5 6 7 8 9");
 @approx (b[0]-Vector(1,2,3)).Module(), 0.0, 1E-10
 @approx (b[1]-Vector(4,5,6)).Module(), 0.0, 1E-10
 @approx (b[2]-Vector(7,8,9)).Module(), 0.0, 1E-10
}
@end

@test Constructor con strings, 6 valores
{
 Cell c("5 7 5 90 90 90");
 @approx (c[0]-Vector(5,0,0)).Module(), 0.0, 1E-10
 @approx (c[1]-Vector(0,7,0)).Module(), 0.0, 1E-10
 @approx (c[2]-Vector(0,0,5)).Module(), 0.0, 1E-10
}
@end

@test Lectura y asignacion de Periodicity
{
 Cell a;
 for (int q=0;q<3;++q)
 {
  @equal a.Periodicity(q), true
  a.Periodicity(q) = false;
  @equal a.Periodicity(q), false
 }
}
@end

@test Asignacion directa de los vectores base
{
 Vector a(1,2,3);
 Vector b(4,5,6);
 Vector c(7,8,9);
 Cell CELL;
 CELL[0] = a;
 @approx (CELL[0]-a).Module(), 0.0, 1E-10
 CELL[1] = b;
 @approx (CELL[1]-b).Module(), 0.0, 1E-10
 CELL[2] = c;
 @approx (CELL[2]-c).Module(), 0.0, 1E-10
}
@end

@test Scale de los vectores base independientes
{
 Vector a1(1,2,3);
 Vector a2(4,5,6);
 Vector a3(10,9,8);
 Cell c(a1,a2,a3);
 c[0] *= .9;
 c[1] *=1.5;
 c[2] *= .8;
 Vector b1(1*0.9,2*0.9,3*0.9);
 Vector b2(1.5*4,1.5*5,1.5*6);
 Vector b3(.8*10,.8*9,.8*8);
 @approx (c[0]-b1).Module(), 0.0, 1E-10
 @approx (c[1]-b2).Module(), 0.0, 1E-10
 @approx (c[2]-b3).Module(), 0.0, 1E-10
}
@end

@test Scale hidrostatico de vectores base
{
 Vector a1(10,9,8);
 Vector a2(10,30,50);
 Vector a3(20,40,60);
 Cell c(a1,a2,a3);
 c *= .5;
 @approx (c[0]-Vector(5.0,4.5,4.0)).Module(), 0.0, 1E-10
 @approx (c[1]-Vector(5.0,15.0,25.0)).Module(), 0.0, 1E-10
 @approx (c[2]-Vector(10,20,30)).Module(), 0.0, 1E-10
}
@end

@test ScaleByCell
{
 Cell c("10 10 10 90 90 90");
 Vector a1(0.5,0.5,0.5);
 Vector a = c.ScaleByCell(a1);
 @approx (a-Vector(5,5,5)).Module(), 0.0, 1E-10
}
@end

@test Non-Ortogonal Convert to External->Internal->External
{
 Cell c("20 20 20 90 90 120");
 Vector a1(0.5,0.75,0.5);
 c.ConvertToExternal(a1);
 c.ConvertToInternal(a1);
 @approx (a1-Vector(0.5,0.75,0.5)).Module(), 0.0, 1E-10
}
@end

@test Non-Ortogonal Convert to Internal->External->Internal
{
 Cell c("40 40 30 80 110 95");
 Vector a1(10,15,10);
 c.ConvertToInternal(a1);
 c.ConvertToExternal(a1);
 @approx (a1-Vector(10,15,10)).Module(), 0.0, 1E-10
}
@end

@test Convert to Internal, Condicion suficiente
{
 Cell c("40 40 30 80 120 100");
 Vector a1(10,15,10);
 c.ConvertToInternal(a1);
 Vector ee1 = c[0]/c[0].Module();
 Vector ee2 = c[1]/c[1].Module();
 Vector ee3 = c[2]/c[2].Module();
 Vector suma = a1[0]*ee1 + a1[1]*ee2 + a1[2]*ee3;
 @approx (suma-Vector(10,15,10)).Module(), 0.0, 1E-10
}
@end

@test Actualizacion automatica de la matriz de transformaciones
{
 Cell c("40 40 30 80 120 100");
 Vector a1(10,15,10);
 Vector a2;
 a2 = a1;
 c.ConvertToInternal(a1);
 c[0] = c[0] + 0.05*c[2];
 c[1] = c[1] + 0.07*c[0];
 c.ConvertToInternal(a2);
 @notapprox (a1-a2).Module(), 0.0, 1.0E-10
}
@end

@test Calculo de volumen
{
 Cell c("10 20 30 90 90 90");
 @approx c.Volume(), 6000.0, 1.0E-10
 Cell c2("10 10 10 90 90 120");
 @approx c2.Volume(), 1000.0*sin(120.0*M_PI/180.0), 1.0E-10
}
@end

@test Calculo de desplazamientos, celda no periodica 
{
 srand48(long(time(NULL)));
 Cell c("10 10 10 70 80 120");
 for (int q=0;q<3;++q) c.Periodicity(q) = false; 
 Vector center(5.0, 5.0, 5.0);
 for (int i=0;i<1000;++i)
 {
  Vector a = center + RandomVector(10.0);
  Vector b = center + RandomVector(10.0);
  @approx (a + c.Displacement(a, b) - b).Module(), 0.0, 1.0E-10
  @approx c.Displacement(center, a).Module(), 10.0, 1.0E-10
  @approx c.Displacement(center, b).Module(), 10.0, 1.0E-10
 }
}
@end

@test Displacement, celda periodica, cortas distancias
{
 srand48(long(time(NULL)));
 Cell c("10 10 10 90 90 90");
 Vector center(5.0, 5.0, 5.0);
 for (int i=0;i<1000;++i)
 {
  Vector a = center + RandomVector(4.95);
  Vector b = center + RandomVector(4.95);
  @approx (a + c.Displacement(a, b) - b).Module(), 0.0, 1.0E-10
  @approx c.Displacement(center, a).Module(), 4.95, 1.0E-10
  @approx c.Displacement(center, b).Module(), 4.95, 1.0E-10
 }
}

@test Displacement, celda periodica, largas distancias
{
 srand48(long(time(NULL)));
 Cell c(Vector(10.0, 0.0, 0.0), Vector(0.0, 10.0, 0.0), Vector(0.0, 0.0, 10.0));
 for (int q=0;q<3;++q) c.Periodicity(q) = true; 
 for (int i=0;i<1000;++i)
 {
  const Vector a = Vector(1.5, 1.5, 1.5) + RandomVector(1.0);
  const Vector b = Vector(8.5, 8.5, 8.5) + RandomVector(1.0);
  Vector delta = c.Displacement(a, b);
  for (int q=0;q<3;++q) 
  {
   @assert (fabs(delta[q]) <= 5.0)
   @assert (delta[q] < 0.0)
   @approx (fabs(delta[q])+fabs((b-a)[q])), 10.0, 1.0E-10
  }
 }
}
@end

