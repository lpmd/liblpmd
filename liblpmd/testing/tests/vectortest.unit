//
//
//

#include <sstream>
#include <lpmd/vector.h>

using namespace lpmd;

@testsuite Tests de la clase Vector

@test Test de constructor vacio
{
 Vector v;
 @approx fabs(v[0]), 0.0e0, 1E-10
 @approx fabs(v[1]), 0.0e0, 1E-10
 @approx fabs(v[2]), 0.0e0, 1E-10
}
@end

@test Test de constructor con argumentos
{
 Vector v(1,2,3);
 @approx fabs(v[0]-1.0e0), 0.0e0, 1E-10
 @approx fabs(v[1]-2.0e0), 0.0e0, 1E-10
 @approx fabs(v[2]-3.0e0), 0.0e0, 1E-10
}
@end

@test Test de construccion con strings
{
 Vector v1("< 1.0, 2.0, 3.0>");
 Vector v2("4 5 6");
 @approx fabs(v1[0]-1), 0.0e0, 1E-10
 @approx fabs(v1[1]-2), 0.0e0, 1E-10
 @approx fabs(v1[2]-3), 0.0e0, 1E-10
 @approx fabs(v2[0]-4), 0.0e0, 1E-10
 @approx fabs(v2[1]-5), 0.0e0, 1E-10
 @approx fabs(v2[2]-6), 0.0e0, 1E-10
}
@end

@test Test de Asignacion por array
{
 double a[3] = { 1.0, 2.0, 3.0 };
 Vector v(a);
 for (int q=0;q<3;++q) 
 {
  @approx fabs(v[q]-(q+1)), 0.0e0, 1E-10
 }
}
@end

@test Test de Vectores Base
{
 @approx fabs(e1[0]-1.0), 0.0e0, 1E-10
 @approx fabs(e1[1]), 0.0e0, 1E-10
 @approx fabs(e1[2]), 0.0e0, 1E-10
 @approx fabs(e2[0]), 0.0e0, 1E-10
 @approx fabs(e2[1]-1.0), 0.0e0, 1E-10
 @approx fabs(e2[2]), 0.0e0, 1E-10
 @approx fabs(e3[0]), 0.0e0, 1E-10
 @approx fabs(e3[1]), 0.0e0, 1E-10
 @approx fabs(e3[2]-1.0), 0.0e0, 1E-10
}
@end

@test Test de Construccion por copia.
{
 Vector v;
 @approx fabs(v[0]), 0.0e0, 1E-10
 v = e1;
 @approx fabs(v[0]-1.0), 0.0e0, 1.0E-10
 Vector w(3.0, 4.0, 5.0);
 v = w;
 for (int q=0;q<3;++q)
 {
  @approx fabs(v[q]-w[q]), 0.0e0, 1.0E-10
 }
}
@end

@test Test de Asignacion
{
 Vector v;
 v = e1;
 v[1] = 3.0;
 v[2] = 7.0;
 @approx fabs(v[0]-1.0), 0.0e0, 1.0E-10
 @approx fabs(v[1]-3.0), 0.0e0, 1.0E-10
 @approx fabs(v[2]-7.0), 0.0e0, 1.0E-10
}
@end

@test Vector base correcto
{
 Vector v;
 v = e1;
 @approx fabs(v[0]-1.0), 0.0e0, 1.0E-10
 @approx fabs(v[1]-0.0), 0.0e0, 1.0E-10
 @approx fabs(v[2]-0.0), 0.0e0, 1.0E-10
}
@end

@test Vector al azar
{
 Vector v = RandomVector();
 @approx fabs(v.Module()-1.0), 0.0e0, 1.0E-10
 Vector w = RandomVector(42.0);
 @approx fabs(w.Module()-42.0), 0.0e0, 1.0E-10
}
@end

@test Metodos Dot y Cross
{
 Vector v1 = RandomVector();
 Vector v2 = RandomVector();
 Vector w1 = v1+v2;
 Vector w2 = v1-v2;
 for (int q=0;q<3;++q)
  {
   @approx fabs(w1[q]-v1[q]-v2[q]), 0.0e0, 1.0E-10
   @approx fabs(w2[q]-v1[q]+v2[q]), 0.0e0, 1.0E-10
  }
 Vector v(3.0, 4.0, 5.0);
 @approx fabs(Dot(v, e1)-3.0), 0.0e0, 1.0E-10
 @approx fabs(Dot(v, e2)-4.0), 0.0e0, 1.0E-10
 @approx fabs(Dot(v, e3)-5.0), 0.0e0, 1.0E-10
 @approx fabs((Cross(e1, e2)-e3).Module()), 0.0e0, 1.0E-10
 @approx fabs((Cross(e2, e3)-e1).Module()), 0.0e0, 1.0E-10
 @approx fabs((Cross(e3, e1)-e2).Module()), 0.0e0, 1.0E-10
}
@end

@test Metodos Module, SquareModule, Azimuth, Zenith
{
 Vector v(3.0, 4.0, 5.0);
 @approx fabs(v.Module()-sqrt(50.0)), 0.0e0, 1.0E-10
 @approx fabs(v.SquareModule()-50.0), 0.0e0, 1.0E-10
 @approx fabs(e1.Azimuth()-0.0), 0.0e0, 1.0E-10
 @approx fabs(e2.Azimuth()-0.5*M_PI), 0.0e0, 1.0E-10
 @approx fabs(e1.Zenith()-0.5*M_PI), 0.0e0, 1.0E-10
 @approx fabs(e2.Zenith()-0.5*M_PI), 0.0e0, 1.0E-10
 @approx fabs(e3.Zenith()), 0.0e0, 1.0E-10
 for (int n=0;n<100;++n)
 {
  Vector w1 = RandomVector();
  double r = w1.Module();
  double phi = w1.Azimuth();
  double theta = w1.Zenith();
  Vector w2(r*cos(phi)*sin(theta), r*sin(phi)*sin(theta), r*cos(theta));
  @approx fabs((w2-w1).Module()), 0.0e0, 1.0E-10
 }
}
@end

@test Metodo Normalizacion.
{
 Vector v(2,2,2);
 v.Normalize();
 for (int i=0 ; i< 3 ; ++i)
 { 
  @approx (v[i] - 0.57735), 0.0e0, 1E-5
 }
 v = Vector(2,3,4);
 v.Normalize();
 @approx (v[0]-0.37139), 0.0e0, 1E-5
 @approx (v[1]-0.55708), 0.0e0, 1E-5
 @approx (v[2]-0.74278), 0.0e0, 1E-5
}
@end

@test Testeando operador vector*double
{
 Vector v(2,2,2);
 Vector w = v*0.5;
 @approx (w[0]-1.0e0), 0.0e0, 1E-10
 @approx (w[1]-1.0e0), 0.0e0, 1E-10
 @approx (w[2]-1.0e0), 0.0e0, 1E-10
}
@end

@test Testeando operador double*vector
{
 Vector v(3.5,4,2.6);
 Vector w = 2*v;
 @approx (w[0]-7.0e0), 0.0e0, 1E-10
 @approx (w[1]-8.0e0), 0.0e0, 1E-10
 @approx (w[2]-5.2e0), 0.0e0, 1E-10
}
@end

@test Testeando operador Vector/double
{
 Vector v(3,3,3);
 Vector w = v/2.0e0;
 @approx (w[0]-1.5e0), 0.0e0, 1E-10
 @approx (w[1]-1.5e0), 0.0e0, 1E-10
 @approx (w[2]-1.5e0), 0.0e0, 1E-10
}
@end

@test Testeando operador de salida y metodo FormattedWrite
{
 std::ostringstream os;
 Vector v(1, 2, 3);
 os << v << " ";
 FormattedWrite(os, v);
 @equal os.str(), "1 2 3 < 1, 2, 3 >" 
}
@end

@test Testeando operador *= para Vector
{
 Vector a(0.5,4.3,28.5);
 a *= .8;
 Vector b(0.5*0.8,4.3*0.8,28.5*0.8);
 @approx (a-b).Module(), 0.0e0, 1E-10
}
@end
