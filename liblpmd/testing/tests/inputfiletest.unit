//
//
//

#include <lpmd/inputfile.h>
#include <lpmd/paramlist.h>

using namespace lpmd;

@testsuite Tests de la clase InputFile

class MyInputFile: public InputFile
{
 public:
   MyInputFile(): InputFile(), openblock(false), blockargs("")
   {
    DeclareStatement("prueba", "archivo x y z");
    DeclareStatement("comando", "arg1 arg2 arg3");
   }

  int OnStatement(const std::string & name, const std::string & keywords, bool regular)
  {
   if (name == "comando") (*this)["com-kw"] = keywords;
   else if (name == "prueba") (*this)["pru-kw"] = keywords;
   else if (name == "bloque") openblock = true;
   else if (name == "finbloque") openblock = false;
   else 
   {
    if (openblock == false) return 1;
    blockargs += name;
    if (name == "aqui") 
    {
     for (int q=0;q<2;++q) blockargs += (" "+GetNextWord());
     blockargs += " ; ";
    }
    else if (name == "por") 
    {
     for (int q=0;q<3;++q) blockargs += (" "+GetNextWord());
     blockargs += " ; ";
    }
   }
   return 0;
  }

  //
  bool openblock;
  std::string blockargs;
};

@test Probando argumentos posicionales
{
 MyInputFile ipf;
 ParamList options;
 ipf.Read("./inputfile.control", options); 
 @equal ipf.GetString("comando-arg1"), "foo"
 @equal ipf.GetString("comando-arg2"), "bar"
 @equal ipf.GetInteger("comando-arg3"), 42
}
@end

@test Probando argumentos con nombre
{
 MyInputFile ipf;
 ParamList options;
 ipf.Read("./inputfile.control", options); 
 @equal ipf.GetString("prueba-archivo"), "test.dat"
 @approx ipf.GetDouble("prueba-x"), 2.0, 0.0000001
 @approx ipf.GetDouble("prueba-y"), 4.0, 0.0000001
 @approx ipf.GetDouble("prueba-z"), 6.0, 0.0000001
}
@end

@test Probando InputFile::OnStatement
{
 MyInputFile ipf;
 ParamList options;
 ipf.Read("./inputfile.control", options); 
 @assert ipf.Defined("com-kw")
 @equal ipf["com-kw"], "arg1 foo arg2 bar arg3 42 "
 @assert ipf.Defined("pru-kw")
 @equal ipf["pru-kw"], "z 6.0 x 2.0 archivo test.dat y 4.0 "
}
@end

@test Probando bloques
{
 MyInputFile ipf;
 ParamList options;
 ipf.Read("./inputfile.control", options); 
 @equal ipf.blockargs, "aqui ejecuto algo ; por aca otra cosa ; "
}
@end


