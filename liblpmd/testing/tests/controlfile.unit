
#include <lpmd/controlfile.h>
#include <lpmd/error.h>

#include <sstream>

using namespace lpmd;

//
class TestControlFile: public ControlFile
{
 public:
   int OnNonRegularStatement(const std::string & name, const std::string & full_statement)
   {
    nonregular.Append(full_statement);
    return 0;
   }

   int OnBlock(const std::string & name, const std::string & full_statement)
   {
    blocks.Append(full_statement);
    return 0;
   }

   Array<std::string> nonregular;
   Array<std::string> blocks;
};

@testsuite Tests de ControlFile

@test Lectura de control file simple
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input miplugin foo bar\n\n";
 data += "output otroplugin hello world\n";
 ParamList opts;
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @assert cf.Defined("input-name")
 @assert cf.Defined("output-name")
 @equal cf["input-name"], "miplugin"
 @equal cf["input-arg1"], "foo"
 @equal cf["input-arg2"], "bar"
 @equal cf["output-name"], "otroplugin"
 @equal cf["output-arg1"], "hello"
 @equal cf["output-arg2"], "world"
}
@end

@test Manejo de comentarios en medio de la linea
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input miplugin # foo bar\n\n";
 data += "output otroplugin # hello world\n";
 ParamList opts;
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @assert cf.Defined("input-name")
 @assert cf.Defined("output-name")
 @equal cf["input-name"], "miplugin"
 @equal cf["input-arg1"], ""
 @equal cf["input-arg2"], ""
 @equal cf["output-name"], "otroplugin"
 @equal cf["output-arg1"], ""
 @equal cf["output-arg2"], ""
}
@end

@test Lectura de control file con keywords
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input arg2=bar name=miplugin arg1=foo\n\n";
 data += "output arg1=hello arg2=world name=otroplugin\n";
 ParamList opts;
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @assert cf.Defined("input-name")
 @assert cf.Defined("output-name")
 @equal cf["input-name"], "miplugin"
 @equal cf["input-arg1"], "foo"
 @equal cf["input-arg2"], "bar"
 @equal cf["output-name"], "otroplugin"
 @equal cf["output-arg1"], "hello"
 @equal cf["output-arg2"], "world"
}
@end

@test Instruccion desconocida arroja excepcion
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input miplugin foo bar\n\n";
 data += "output otroplugin hello world\n";
 data += "property x\n";
 ParamList opts;
 
 std::istringstream istr(data);
 try
 {
  cf.Read(istr, opts, "prueba");
  @fail
 }
 catch (Error & e)
 {
  @pass
 }
}
@end

@test Test de OnNonRegularStatement
{
 TestControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input miplugin foo bar\n\n";
 data += "output otroplugin hello world\n";
 data += "property x\n";
 data += "apply z\n";
 ParamList opts;
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @equal cf.nonregular.Size(), 2
 @equal cf.nonregular[0], "property x"
 @equal cf.nonregular[1], "apply z"
}
@end

@test Substitucion de variables
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");

 std::string data = "#\n#\n#\n";
 data += "input miplugin $(VAR2) bar\n\n";
 data += "output otroplugin hello $(VAR1)\n";
 ParamList opts;
 opts["VAR1"] = "world";
 opts["VAR2"] = "foo";
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @assert cf.Defined("input-name")
 @assert cf.Defined("output-name")
 @equal cf["input-name"], "miplugin"
 @equal cf["input-arg1"], "foo"
 @equal cf["input-arg2"], "bar"
 @equal cf["output-name"], "otroplugin"
 @equal cf["output-arg1"], "hello"
 @equal cf["output-arg2"], "world"
}
@end

@test Bloque sin manejar arroja excepcion
{
 ControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");
 cf.DeclareBlock("use", "enduse");

 std::string data = "#\n#\n#\n";
 data += "input miplugin foo bar\n\n";
 data += "output otroplugin hello world\n";
 data += "use miplugin\n";
 data += "    arg nothing\n";
 data += "enduse\n";
 ParamList opts;
 
 std::istringstream istr(data);
 try
 {
  cf.Read(istr, opts, "prueba");
  @fail
 }
 catch (Error & e)
 {
  @pass
 }
}
@end

@test Test de OnBlock
{
 TestControlFile cf;
 cf.DeclareStatement("input", "name arg1 arg2");
 cf.DeclareStatement("output", "name arg1 arg2");
 cf.DeclareBlock("use", "enduse");
 cf.DeclareBlock("type", "endtype");

 std::string data = "#\n#\n#\n";
 data += "input miplugin foo bar\n\n";
 data += "output otroplugin hello world\n";
 data += "use miplugin\n";
 data += "    arg nothing\n";
 data += "enduse\n\n";
 data += "type un_tipo_de_atomos\n";
 data += "    fixedpos true\n";
 data += "endtype\n";
 ParamList opts;
 
 std::istringstream istr(data);
 cf.Read(istr, opts, "prueba");
 @equal cf.blocks.Size(), 2
 @equal cf.blocks[0], "useblock miplugin arg nothing"
 @equal cf.blocks[1], "typeblock un_tipo_de_atomos fixedpos true"
}
@end

